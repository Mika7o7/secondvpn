# from aiogram import Router, types, F
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from datetime import datetime, timedelta
# import random
# import string
# import asyncio
# from database import save_key, get_access_keys, get_client
# from controlers.add_client import add_client
# from handlers.payments import payment_verification_decorator, DISCOUNTED_PRICES, generate_payment_token, PAYMENT_URL, cloudtips, create_new_key_action

# access_router = Router()

# # –ö–ª–∞—Å—Å –¥–ª—è FSM
# class AddAccess(StatesGroup):
#     awaiting_months = State()
#     awaiting_payment = State()

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É" (—Å –æ–ø–ª–∞—Ç–æ–π)
# @access_router.callback_query(F.data == "add_access")
# async def add_access(callback: types.CallbackQuery, state: FSMContext):
#     await state.clear()
#     price_list = "\n".join([f"{m} –º–µ—Å. ‚Äî {p} —Ä—É–±." for m, p in DISCOUNTED_PRICES.items()])
#     await callback.message.answer(
#         f"üíæ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è Zion:\n{price_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö):",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text=str(months), callback_data=f"add_months:{months}") for months in [1, 3, 6, 12]]
#         ])
#     )
#     await state.set_state(AddAccess.awaiting_months)
#     await callback.answer()

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—è—Ü–µ–≤
# @access_router.callback_query(AddAccess.awaiting_months, F.data.startswith("add_months:"))
# async def process_add_months(callback: types.CallbackQuery, state: FSMContext):
#     user_id = callback.from_user.id
#     months = int(callback.data.split(":")[1])

#     if months not in DISCOUNTED_PRICES:
#         await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 3, 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤.")
#         await callback.answer()
#         return

#     payment_token = generate_payment_token()
#     amount = DISCOUNTED_PRICES[months]
#     token_created = datetime.now().isoformat() + "+03:00"
#     name = f"user_{user_id}_{''.join(random.choices(string.ascii_lowercase + string.digits, k=8))}"

#     await state.update_data(
#         token=payment_token,
#         months=months,
#         amount=amount,
#         name=name,
#         token_created=token_created
#     )

#     warning_text = (
#         f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
#         f"–ß—Ç–æ–±—ã <b>–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —ç—Ç–æ—Ç –∫–æ–¥:\n\n"
#         f"<code>{payment_token}</code>"
#     )
#     await callback.message.answer(warning_text, parse_mode="HTML")

#     await asyncio.sleep(4)

#     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üíæ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_URL)],
#         [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_add_payment")]
#     ])

#     await callback.message.answer(
#         f"üí∞ {amount} —Ä—É–±. –∑–∞ {months} –º–µ—Å. –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.\n"
#         f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å <b>¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª</b>.",
#         reply_markup=keyboard,
#         parse_mode="HTML"
#     )

#     await state.set_state(AddAccess.awaiting_payment)
#     await callback.answer()

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
# @access_router.callback_query(F.data == "confirm_add_payment")
# @payment_verification_decorator
# async def confirm_add_payment(call: types.CallbackQuery, state: FSMContext, user_id: int, username: str, amount: float, expected_amount: float, months: int, effective_months: float):
#     try:
#         message, keyboard = await create_new_key_action(
#             user_id=user_id,
#             username=username,
#             amount=amount,
#             expected_amount=expected_amount,
#             months=months,
#             effective_months=effective_months
#         )
#         await call.message.answer(message, reply_markup=keyboard, parse_mode="HTML")
#         await state.clear()
#     except Exception as e:
#         await call.message.answer(f"‚úÖ –ö–ª—é—á –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –û—Ä–∞–∫—É–ª–æ–º: {str(e)}.")
#         await state.clear()

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞ (–±–µ–∑ –æ–ø–ª–∞—Ç—ã)
# @access_router.callback_query(F.data == "add_test_access")
# async def add_test_access(callback: types.CallbackQuery, state: FSMContext):
#     tg_id = callback.from_user.id
#     telegram_username = callback.from_user.username or "unknown"

#     subscription_url, username = add_client(tg_id, telegram_username, xpiry_days=3)

#     existing_keys = get_access_keys(tg_id)
#     name = f"–ö–ª—é—á_{len(existing_keys) + 1}"

#     expires_at = (datetime.now() + timedelta(days=3)).isoformat()
#     save_key(tg_id, subscription_url, username, name, expires_at)

#     keys = get_access_keys(tg_id)

#     if not keys:
#         await callback.message.answer("–ö–ª—é—á–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
#     else:
#         text = "üîê –¢–≤–æ–∏ –∫–ª—é—á–∏:\n\n"
#         for idx, (key_id, key_val, expires_at, key_name) in enumerate(keys, start=1):
#             short_key = f"{key_val[:4]}...{key_val[-4:]}"
#             expire_str = datetime.fromisoformat(expires_at).strftime("%d.%m.%Y") if expires_at else "‚àû"
#             text += f"{key_name}: <code>{short_key}</code> ‚Äî –¥–æ {expire_str}\n"

#         await callback.message.answer(text, parse_mode="HTML")

#     await callback.answer()