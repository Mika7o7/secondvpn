from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_users_count, get_active_users_count, get_inactive_users_count, get_income, get_all_users, get_active_users, get_inactive_users
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

admin_router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 1628997906

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID


# --- FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
class BroadcastState(StatesGroup):
    waiting_for_message = State()
    waiting_for_target_group = State()

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@admin_router.message(Command("broadcast"))
async def start_broadcast(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –í—Å–µ–º", callback_data="broadcast_all")],
        [InlineKeyboardButton(text="‚úÖ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="broadcast_active")],
        [InlineKeyboardButton(text="üö´ –¢–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="broadcast_inactive")]
    ])
    await message.answer("–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=keyboard)
    await state.set_state(BroadcastState.waiting_for_target_group)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã ---
@admin_router.callback_query(lambda c: c.data.startswith("broadcast_"))
async def choose_group(callback: types.CallbackQuery, state: FSMContext):
    group = callback.data.replace("broadcast_", "")
    await state.update_data(target_group=group)
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastState.waiting_for_message)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@admin_router.message(BroadcastState.waiting_for_message)
async def send_broadcast(message: types.Message, state: FSMContext, bot):
    data = await state.get_data()
    group = data.get("target_group")
    text = message.text
    
    if group == "all":
        users = get_all_users()
    elif group == "active":
        users = get_active_users()
    elif group == "inactive":
        users = get_inactive_users()
    else:
        users = []

    success = 0
    fail = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            success += 1
        except Exception as e:
            fail += 1
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")
    await state.clear()

@admin_router.message(Command("users_count"))
async def users_count(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users_count"""
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"User {user_id} attempted to access /users_count without permission")
        return

    try:
        count = get_users_count()
        await message.answer(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
        logger.info(f"User {user_id} requested users count: {count}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to get users count for user {user_id}: {e}")

@admin_router.message(Command("active_users"))
async def active_users(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /active_users"""
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"User {user_id} attempted to access /active_users without permission")
        return

    try:
        count = get_active_users_count()
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
        logger.info(f"User {user_id} requested active users count: {count}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to get active users count for user {user_id}: {e}")

@admin_router.message(Command("inactive_users"))
async def inactive_users(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /inactive_users"""
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"User {user_id} attempted to access /inactive_users without permission")
        return

    try:
        count = get_inactive_users_count()
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
        logger.info(f"User {user_id} requested inactive users count: {count}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to get inactive users count for user {user_id}: {e}")

@admin_router.message(Command("income"))
async def income(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /income"""
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"User {user_id} attempted to access /income without permission")
        return

    try:
        total_income = get_income()
        await message.answer(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} —Ä—É–±.")
        logger.info(f"User {user_id} requested income: {total_income} —Ä—É–±.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to get income for user {user_id}: {e}")