from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from controlers.get_expired_users import get_expired_clients  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
from controlers.disable_inbound import disable_inbound
from controlers.delete_inbound import delete_inbound
from datetime import datetime, timedelta
from keyboards.inline_keyboards import extend_keyboard
import logging

logger = logging.getLogger(__name__)

scheduler = AsyncIOScheduler()


async def check_subscriptions(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""
    logger.info("Checking subscriptions")
    try:
        expired_clients = get_expired_clients()
        logger.info(f"Found {len(expired_clients)} expired clients: {expired_clients}")
        for client in expired_clients:
            if len(client) < 6:
                logger.error(f"Invalid client data: {client}, expected 6 elements")
                continue

            tg_id = client[0]
            username = client[1]
            payment_status = client[2]
            end_date = client[3]
            server_country = client[4]
            disabled_at = client[5]

            logger.info(f"Processing client {tg_id}: username={username}, payment_status={payment_status}, end_date={end_date}, server_country={server_country}, disabled_at={disabled_at}")

            try:
                if not disabled_at:
                    logger.info(f"Subscription expired for user {tg_id}, disabling inbound {username}")
                    disabled_at = disable_inbound(tg_id)
                    text = (
                        f"‚ö†Ô∏è –¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –ó–∏–æ–Ω—É –∏—Å—Ç—ë–∫ ({end_date}). –°–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n"
                        "–ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:"
                    )
                    try:
                        await bot.send_message(tg_id, text, reply_markup=extend_keyboard())
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {str(e)}")

                # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –±–ª–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è:
                """
                else:
                    try:
                        disabled_at_dt = datetime.strptime(disabled_at, "%Y-%m-%d %H:%M:%S")
                        if (datetime.now() - disabled_at_dt) >= timedelta(minutes=10) and payment_status != "active":
                            logger.info(f"10 minutes passed since disable for user {tg_id}, deleting inbound {username}")
                            delete_inbound(tg_id, username)
                            await bot.send_message(
                                tg_id,
                                "üóëÔ∏è –¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –ó–∏–æ–Ω—É —É–¥–∞–ª—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏ –∫—Ä–∞—Å–Ω—É—é —Ç–∞–±–ª–µ—Ç–∫—É —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start."
                            )
                    except Exception as e:
                        logger.error(f"Error while parsing disabled_at for user {tg_id}: {str(e)}")
                """
            except Exception as e:
                logger.error(f"Failed to process client {tg_id}: {str(e)}")
                try:
                    await bot.send_message(tg_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
                except Exception as send_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {str(send_error)}")
    except Exception as e:
        logger.error(f"Failed to check subscriptions: {str(e)}")

def setup_scheduler(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler.add_job(
        check_subscriptions,
        trigger=IntervalTrigger(days=1),
        id="check_subscriptions",
        kwargs={"bot": bot}
    )
    scheduler.start()
    logger.info("Scheduler started")

