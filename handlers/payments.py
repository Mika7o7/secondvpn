import json
import random
import string
import logging
from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database import get_client, update_client_end_date, update_client_status, update_client_spend
from controlers.extend_subscription import update_client_expiry
from core.cloudtips_client import CloudTipsClient
from config import PAYMENT_URL, CLOUDTIPS_CLIENT_ID, TOKEN_FILE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
payments_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cloudtips
cloudtips = CloudTipsClient(CLOUDTIPS_CLIENT_ID, TOKEN_FILE)

# –ö–ª–∞—Å—Å –¥–ª—è FSM
class ExtendSubscription(StatesGroup):
    months = State()
    awaiting_payment = State()

def generate_payment_token() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 8-–∑–Ω–∞—á–Ω–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    return ''.join(random.choices(string.digits, k=8))

@payments_router.message(Command("extend"))
@payments_router.callback_query(lambda call: call.data == "extend_subscription")
async def extend_subscription(event: types.Message | types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extend –∏–ª–∏ callback extend_subscription."""
    user_id = event.from_user.id
    client = get_client(user_id)
    if not client:
        if isinstance(event, types.Message):
            await event.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ Zion —Å –ø–æ–º–æ—â—å—é /start.")
        else:
            await event.message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ Zion —Å –ø–æ–º–æ—â—å—é /start.")
            await event.answer()
        return

    await state.clear()
    text = (
        "üíæ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ Zion: 100 —Ä—É–±./–º–µ—Å.\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è (1-12):"
    )
    if isinstance(event, types.Message):
        await event.answer(text)
    else:
        await event.message.answer(text)
        await event.answer()

    await state.set_state(ExtendSubscription.months)
    logger.info(f"–ê–≥–µ–Ω—Ç {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞, –∂–¥—ë–º –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤")

@payments_router.message(ExtendSubscription.months)
async def process_months(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—è—Ü–µ–≤."""
    user_id = message.from_user.id
    text = message.text.strip()
    logger.info(f"–ê–≥–µ–Ω—Ç {user_id} –≤–≤—ë–ª: {text}")

    try:
        months = int(text)
        if months < 1 or months > 12:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12.")
            logger.warning(f"–ê–≥–µ–Ω—Ç {user_id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤: {text}")
            return

        client = get_client(user_id)
        if not client or not client[1]:
            await message.answer("–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –û—Ä–∞–∫—É–ª–æ–º.")
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id}")
            await state.clear()
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        payment_token = generate_payment_token()
        amount = 100 * months
        token_created = datetime.now().isoformat() + "+03:00"  # –§–æ—Ä–º–∞—Ç ISO 8601
        await state.update_data(
            token=payment_token,
            months=months,
            amount=amount,
            username=client[1],
            token_created=token_created
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíæ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_URL)],
            [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment")]
        ])
        await message.answer(
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
            f"–£–∫–∞–∂–∏ –∫–æ–¥ <code>{payment_token}</code> –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É!\n\n"
            f"üí∞ {amount} —Ä—É–±. –∑–∞ {months} –º–µ—Å. –¥–æ—Å—Ç—É–ø–∞ –∫ Zion.\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ <b>¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª</b>.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"–ê–≥–µ–Ω—Ç {user_id} –ø–æ–ª—É—á–∏–ª –∫–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã {payment_token} –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É")

        await state.set_state(ExtendSubscription.awaiting_payment)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        logger.warning(f"–ê–≥–µ–Ω—Ç {user_id} –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ: {text}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id}: {str(e)}")
        await state.clear()

@payments_router.message(ExtendSubscription.months, lambda message: message.text.startswith('/'))
async def ignore_commands(message: types.Message):
    """–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤."""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12.")

@payments_router.callback_query(lambda call: call.data == "confirm_payment")
async def confirm_payment(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'."""
    user_id = call.from_user.id

    state_data = await state.get_data()
    # –≠—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–∞
    payment_token = "ggwp"  # –û—Å—Ç–∞–≤–ª—è–µ–º ggwp –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    expected_amount = state_data.get("amount")
    months = state_data.get("months")
    username = state_data.get("username")
    token_created = state_data.get("token_created")

    logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id}: token={payment_token}, amount={expected_amount}, months={months}, username={username}, token_created={token_created}")

    if not all([payment_token, expected_amount, months, username, token_created]):
        await call.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å /extend.")
        logger.error(f"–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id}")
        await call.answer()
        await state.clear()
        return

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        created_time = datetime.fromisoformat(token_created)
        date_from = (created_time - timedelta(hours=1)).isoformat()  # 1 —á–∞—Å –Ω–∞–∑–∞–¥
        date_to = (created_time + timedelta(days=1)).isoformat()  # 1 –¥–µ–Ω—å –≤–ø–µ—Ä—ë–¥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ /api/timeline —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        logger.info(f"–ó–∞–ø—Ä–æ—Å timeline –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id} —Å –∫–æ–¥–æ–º {payment_token}, dateFrom={date_from}, dateTo={date_to}")
        timeline = await cloudtips.get_timeline(date_from=date_from, date_to=date_to)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç timeline –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id}: {json.dumps(timeline, indent=2, ensure_ascii=False)}")
        if not timeline.get("succeed"):
            await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ timeline –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id}: {timeline.get('errors')}")
            await call.answer()
            await state.clear()
            return

        # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∫–æ–¥–æ–º –º–∞—Ç—Ä–∏—Ü—ã
        for item in timeline.get("data", {}).get("items", []):
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ timeline: comment={item.get('comment')}")
            if item.get("comment") == payment_token:
                amount = item.get("paymentAmount", 0)
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id}: –∫–æ–¥ {payment_token}, —Å—É–º–º–∞ {amount}, –æ–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ {expected_amount}")
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
                proportion = amount / 100  # 100 RUB = 1 –º–µ—Å—è—Ü
                effective_months = proportion * months
                # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
                try:
                    new_end_date = update_client_expiry(tg_id=user_id, username=username, months=effective_months)
                    update_client_spend(tg_id=user_id, amount=amount)
                    update_client_status(user_id, "paid")
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã
                    if abs(amount - expected_amount) < 0.01:
                        message = f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ {amount} RUB –ø—Ä–æ—à–ª–∞! –î–æ—Å—Ç—É–ø –∫ Zion –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {months} –º–µ—Å. –¥–æ {new_end_date}."
                    else:
                        effective_days = int(proportion * 30)  # 1 –º–µ—Å—è—Ü = 30 –¥–Ω–µ–π
                        message = f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount} RUB –ø–æ–ª—É—á–µ–Ω–∞ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_amount} RUB). –î–æ—Å—Ç—É–ø –∫ Zion –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {effective_days} –¥–Ω–µ–π –¥–æ {new_end_date}."
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_start")]
                    ])
                    await call.message.answer(message, reply_markup=keyboard)
                    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–∫–æ–¥ {payment_token}, —Å—É–º–º–∞ {amount}, –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ {effective_months} –º–µ—Å.)")
                    await state.clear()
                    await call.answer()
                    return
                except Exception as e:
                    await call.message.answer(
                        "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –û—Ä–∞–∫—É–ª–æ–º."
                    )
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}: {str(e)}")
                    await call.answer()
                    await state.clear()
                    return

        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        await call.message.answer(
            "‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –∫–æ–¥–æ–º {payment_token} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id}")
        await call.answer()
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {user_id}: {str(e)}")
        await call.answer()
        await state.clear()

@payments_router.callback_query(lambda call: call.data == "back_to_start")
async def back_to_start(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É."""
    await call.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Zion.")
    await call.message.delete()
    await call.answer()
