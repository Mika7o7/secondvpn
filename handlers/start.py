import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, FSInputFile
from database import get_client, create_client, update_client_status
from controlers.add_client import add_client
from datetime import datetime
from config import SUBSCRIPTION_CONFIG
from keyboards.inline_keyboards import extend_keyboard, vless_keyboard
import logging

logger = logging.getLogger(__name__)

start_router = Router()


@start_router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    logger.info(f"Processing /start for user {user_id} with username @{username}")

    client = get_client(user_id)
    logger.info(f"get_client({user_id}) returned: {client}")

    if client:
        try:
            end_date = datetime.strptime(client[3], "%Y-%m-%d %H:%M:%S")
            payment_status = client[2]
            logger.info(f"Client {user_id} found: end_date={end_date}, payment_status={payment_status}")

            text = (
                "‚ò†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –±–µ–≥–ª–µ—Ü –∏–∑ –ú–∞—Ç—Ä–∏—Ü—ã!\n\n"
                f"–¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –ó–∏–æ–Ω—É –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {client[3]}.\n"
                "–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ó–∏–æ–Ω—É –∑–∞ 100 —Ä—É–±./–º–µ—Å.?\n\n"
            )
            await message.answer(text, reply_markup=extend_keyboard(), parse_mode="HTML")
            return

        except ValueError as e:
            logger.error(f"Invalid end_date for user {user_id}: {client[3]}, error: {e}")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return

    # –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    logger.info(f"Creating new client {user_id}")
    try:
        subscription_url, username = add_client(user_id)
        create_client(user_id, username, None)
        await state.update_data(subscription_url=subscription_url)

        # üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–∂–Ω—ã–µ username
        if username in ("lisswana", "mikaggwp2"):
            notify_text = f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})"
            await message.bot.send_message(chat_id=1628997906, text=notify_text)

        text = (
            "üöÄ –¢–µ–±–µ –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ó–∏–æ–Ω—É: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –Ω–æ–≤–µ–π—à–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.\n\n"
            "üõ∞Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ‚Äî —Ç—ã –≤–Ω–µ –∑–æ–Ω—ã —Å–ª–µ–∂–∫–∏.\n\n"
            "üõ°Ô∏è –û—Å—Ç–∞–≤–∞–π—Å—è –Ω–µ–≤–∏–¥–∏–º–∫–æ–π –≤ –º–∏—Ä–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è.\n\n"
            f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ó–∏–æ–Ω—É –Ω–∞ {SUBSCRIPTION_CONFIG['trial_days']} –¥–Ω—è!\n\n"
            "üöÄ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n"
            "1Ô∏è‚É£ –°–ö–ê–ß–ê–ô –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üëá\n"
            "2Ô∏è‚É£ –ù–ê–ñ–ú–ò –Ω–∞ üíä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∫ –ó–∏–æ–Ω—É\n"
            "3Ô∏è‚É£ –û–¢–ö–†–û–ô –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏ ‚ûï\n"
            "4Ô∏è‚É£ –í–°–¢–ê–í–¨ –∫–ª—é—á –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞\n"
            "5Ô∏è‚É£ –ù–ê–ñ–ú–ò '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è' üîå\n\n"
            "üåê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ó–∏–æ–Ω."
        )

        try:
            with open("images/matrix.jpeg", "rb") as file:
                photo = BufferedInputFile(file.read(), filename="matrix.jpeg")
            await message.answer_photo(
                photo=photo,
                caption=text,
                reply_markup=vless_keyboard(),
                parse_mode="HTML"
            )
        except FileNotFoundError:
            logger.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ matrix.jpeg –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await message.answer(text, reply_markup=vless_keyboard(), parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        try:
            video_file = FSInputFile("videos/setup.mp4")  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –≤–∏–¥–µ–æ
            await message.answer_video(
                video=video_file,
                caption="üé¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é ‚Äî —Å–º–æ—Ç—Ä–∏ –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Å—è –∑–∞ 1 –º–∏–Ω—É—Ç—É!",
                parse_mode="HTML"
            )
        except FileNotFoundError:
            logger.warning("–í–∏–¥–µ–æ setup.mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        asyncio.create_task(send_followup_message(message))

    except Exception as e:
        logger.error(f"Failed to create client {user_id}: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ó–∏–æ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        return

async def send_followup_message(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"""
    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

    try:
        text = (
            "‚ú® –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –º–æ–π —Å–µ—Ä–≤–∏—Å!\n\n"
            "üîß –£ –º–µ–Ω—è –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ç–æ–∫\n"
            "üé• –°–º–æ—Ç—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ üëá"
        )
        await message.answer(text)

        try:
            video_file = FSInputFile("videos/stream_settings.mp4")
            await message.answer_video(
                video=video_file,
                caption="üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –≤ 2 –∫–ª–∏–∫–∞.",
                parse_mode="HTML"
            )
        except FileNotFoundError:
            logger.warning("–í–∏–¥–µ–æ stream_settings.mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {message.from_user.id}: {e}")

@start_router.message(Command("support"))
async def support_cmd(message: types.Message):
    await message.answer(
        "üìû [–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É](https://t.me/Mikaggwp)",
        disable_web_page_preview=True,
        parse_mode="Markdown"
    )

@start_router.message(Command("channel"))
async def channel_cmd(message: types.Message):
    await message.answer(
        "üì¢ [–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/+teMI40exbmk2MGEy)",
        disable_web_page_preview=True,
        parse_mode="Markdown"
    )

@start_router.callback_query(lambda call: call.data == "copy_vless")
async def copy_vless_callback(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–∞–±–ª–µ—Ç–∫–∞' (üíä)"""
    user_id = call.from_user.id
    data = await state.get_data()
    subscription_url = data.get("subscription_url")
    subscription_url = str(subscription_url).replace(".org",".org:8000")
    if subscription_url:
        message_text = f"üî¥ –¢–≤–æ–∏ –∫–ª—é—á–∏ –∫ –ó–∏–æ–Ω—É.\n\n<code>{subscription_url}</code>"
        await call.message.answer(message_text, parse_mode="HTML")
        await call.answer()
    else:
        await call.message.answer("–û—à–∏–±–∫–∞: –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π /start.")
        await call.answer()
