import json
import random
import string
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database import get_client, update_client_end_date, update_client_status, update_client_spend
from controlers.extend_subscription import update_client_expiry
from core.cloudtips_client import CloudTipsClient
from config import PAYMENT_URL, CLOUDTIPS_CLIENT_ID, TOKEN_FILE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
payments_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cloudtips
cloudtips = CloudTipsClient(CLOUDTIPS_CLIENT_ID, TOKEN_FILE)

# –ö–ª–∞—Å—Å –¥–ª—è FSM
class ExtendSubscription(StatesGroup):
    months = State()
    awaiting_payment = State()

def generate_payment_token() -> str:
    return ''.join(random.choices(string.digits, k=8))

# –¶–µ–Ω—ã –ø–æ –∞–∫—Ü–∏–∏
DISCOUNTED_PRICES = {
    1: 100,
    3: 250,
    6: 450,
    12: 800,
}

@payments_router.message(Command("extend"))
@payments_router.callback_query(lambda call: call.data == "extend_subscription")
async def extend_subscription(event: types.Message | types.CallbackQuery, state: FSMContext):
    user_id = event.from_user.id
    client = get_client(user_id)
    if not client:
        text = "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ Zion —Å –ø–æ–º–æ—â—å—é /start."
        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.message.answer(text)
            await event.answer()
        return

    await state.clear()
    price_list = "\n".join([f"{m} –º–µ—Å. ‚Äî {p} —Ä—É–±." for m, p in DISCOUNTED_PRICES.items()])
    text = f"üíæ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ Zion:\n{price_list}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è (1, 3, 6 –∏–ª–∏ 12):"

    if isinstance(event, types.Message):
        await event.answer(text)
    else:
        await event.message.answer(text)
        await event.answer()

    await state.set_state(ExtendSubscription.months)

@payments_router.message(ExtendSubscription.months)
async def process_months(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()

    try:
        months = int(text)
        if months not in DISCOUNTED_PRICES:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ 1, 3, 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤.")
            return

        client = get_client(user_id)
        if not client or not client[1]:
            await message.answer("–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –û—Ä–∞–∫—É–ª–æ–º.")
            await state.clear()
            return

        payment_token = generate_payment_token()
        amount = DISCOUNTED_PRICES[months]
        token_created = datetime.now().isoformat() + "+03:00"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            token=payment_token,
            months=months,
            amount=amount,
            username=client[1],
            token_created=token_created
        )

        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
        warning_text = (
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
            f"–ß—Ç–æ–±—ã <b>–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —ç—Ç–æ—Ç –∫–æ–¥:\n\n"
            f"<code>{payment_token}</code>"
        )
        await message.answer(warning_text, parse_mode="HTML")

        # 2. –ü–∞—É–∑–∞ 4 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(4)

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíæ –û–ø–ª–∞—Ç–∏—Ç—å", url=PAYMENT_URL)],
            [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment")]
        ])

        # 4. –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        await message.answer(
            f"üí∞ {amount} —Ä—É–±. –∑–∞ {months} –º–µ—Å. –¥–æ—Å—Ç—É–ø–∞ –∫ Zion.\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å <b>¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª</b>.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        await state.set_state(ExtendSubscription.awaiting_payment)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        await state.clear()

@payments_router.message(ExtendSubscription.months, lambda message: message.text.startswith('/'))
async def ignore_commands(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 3, 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤.")

@payments_router.callback_query(lambda call: call.data == "confirm_payment")
async def confirm_payment(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    state_data = await state.get_data()

    payment_token = state_data.get("token")
    expected_amount = state_data.get("amount")
    months = state_data.get("months")
    username = state_data.get("username")
    token_created = state_data.get("token_created")

    if not all([payment_token, expected_amount, months, username, token_created]):
        await call.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å /extend.")
        await call.answer()
        await state.clear()
        return

    try:
        created_time = datetime.fromisoformat(token_created)
        date_from = (created_time - timedelta(hours=2)).isoformat()
        date_to = (created_time + timedelta(days=1)).isoformat()

        timeline = await cloudtips.get_timeline(date_from=date_from, date_to=date_to)
        if not timeline.get("succeed"):
            await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            await call.answer()
            await state.clear()
            return

        for item in timeline.get("data", {}).get("items", []):
            if item.get("comment") == payment_token:
                amount = item.get("paymentAmount", 0)
                proportion = amount / 100
                effective_months = proportion

                try:
                    new_end_date = update_client_expiry(tg_id=user_id, username=username, months=effective_months)
                    update_client_spend(tg_id=user_id, amount=amount)
                    update_client_status(user_id, "paid")

                    if abs(amount - expected_amount) < 0.01:
                        message = f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ {amount} RUB –ø—Ä–æ—à–ª–∞! –î–æ—Å—Ç—É–ø –∫ Zion –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {months} –º–µ—Å. –¥–æ {new_end_date}."
                    else:
                        effective_days = int(proportion * 30)
                        message = f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount} RUB –ø–æ–ª—É—á–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ Zion –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {effective_days} –¥–Ω–µ–π –¥–æ {new_end_date}."

                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_start")]
                    ])
                    await call.message.answer(message, reply_markup=keyboard)
                    await state.clear()
                    await call.answer()
                    return

                except Exception as e:
                    await call.message.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –û—Ä–∞–∫—É–ª–æ–º.")
                    await state.clear()
                    await call.answer()
                    return

        await call.message.answer("‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        await call.answer()
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        await state.clear()
        await call.answer()

@payments_router.callback_query(lambda call: call.data == "back_to_start")
async def back_to_start(call: types.CallbackQuery):
    await call.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Zion.")
    await call.message.delete()
    await call.answer()
